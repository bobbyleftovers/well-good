<?php

namespace WG\Plugins;

class JW_Player {

  static $jwplayer_api_key = '';
  static $jwplayer_secret_key = '';
  static $jwplayer_default_player = '';

  function __construct() {
    $this->setApiCredentials();

    remove_shortcode('jwplayer');
    add_shortcode('jwplayer', array($this, 'shortcode'));
    add_filter('process_jw_player_post_hero', array($this, 'apple_news_player'), 10, 2);
  }

  /**
   * Set API Credentials
   *
   * @return void
   */
  function setApiCredentials() {
    self::$jwplayer_api_key = get_field( 'jwplayer_api_key', 'options');
    self::$jwplayer_secret_key = get_field( 'jwplayer_secret_key', 'options');
    self::$jwplayer_default_player = get_field( 'jwplayer_default_player', 'options');
  }

  /**
   * JW Player shortcode is faulty (generated by their plugin)
   * For now, we're removing it and resetting it in an effort to generate our own code
   * whenever the [jwplayer] shortcode is used. The shortcode is generated by their plugin
   * in the wp admin dashboard when editing a post.
   */
  function shortcode($atts) {

    $args = explode('-', $atts[0]);
    $video_id = $args[0];
    $player_id = count( $args ) > 1 ? $args[1] : self::$jwplayer_default_player;

    if (is_admin() || (function_exists( 'apple_news_is_exporting' ) && apple_news_is_exporting() )) {
      return $this->apple_news_player( $video_id );
    } else {
      return $this->jw_player( $video_id, $player_id );
    }
  }

  /*
  * Frontend custom jw player
  */

  function jw_player( $video_id, $player_id ) {
    $content = "<div id=\"botr_{$video_id}_{$player_id}_div\"></div><script src=\"https://content.jwplatform.com/players/{$video_id}-{$player_id}.js\"></script>";

    return $content;
  }

  // TODO: For Audio Podcasts
  // function check_sources_is_video ($sources) {
  //   return array_reduce($sources, function ($result, $source) {
  //     if ($result) return $source;
  //     return $source['type'] === 'application/vnd.apple.mpegurl' || $source['type'] === 'video/mp4';
  //   }, false);
  // }

  /*
  *  Converts jw player media into html5 player
  *  Uses application/vnd.apple.mpegurl as source
  */

  function apple_news_player( $video_id, $onlyUrl = false ) {

    // curl
    $media = $this->get_jw_player_media( $video_id );

    // getting application/vnd.apple.mpegurl as source[0] (adding other resources as a fallback)
    $sources = $media['sources'];
    $img = $media['image'];
    $sourcesHTML = '';
    $type = 'video';
    $videoUrl = null;

    foreach($sources as $src){
      if($src['type'] === 'application/vnd.apple.mpegurl') {
        $sourcesHTML = '<source src="'.$src['file'].'" type="'.$src['type'].'">';
        $videoUrl = $src['file'];
        $type = 'video';
        break;
      } else if($src['type'] === 'video/mp4') {
        $sourcesHTML = '<source src="'.$src['file'].'" type="'.$src['type'].'">';
        $type = 'video';
        $videoUrl = $src['file'];
        // Not adding a break so the last, highest resolution src gets assigned to variable
      }
    }

    if ($type === 'video') {
      $html = '<video poster="'.$img.'" controls>'. $sourcesHTML . '</video>';
    }

    if ($onlyUrl === true) {
      return $videoUrl;
    }

    return $html;
    // TODO: for Audio Podcasts
    // if ($this->check_sources_is_video($sources)) {}
    // else {
    //   foreach($sources as $src){
    //     if($src['type'] === 'audio/mp4') {
    //       $sourcesHTML = $src['file'];
    //       $type = 'audio';
    //       break;
    //     }
    //   }
    // }
    // if ($type === 'audio') {
    //   $html = '<audio src="' . $sourcesHTML .  '" controls></audio>';
    // }
  }

  /*
  *  Curl request to JW player API
  */
  function get_jw_player_media($media_id){
    $ch = curl_init("https://cdn.jwplayer.com/v2/media/$media_id");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    $result = json_decode(curl_exec($ch), true);
    curl_close($ch);
    return $result['playlist'][0];
  }

  static function generate_api_nonce() {
    $nonce = '';

    for ($i = 0; $i < 8; $i++) :
      $nonce .= mt_rand(0, 9);
    endfor;

    return $nonce;
  }

  /**
   * Curl request fetch JW Player player names
   */
  static function get_jw_player_players() {
    $players = array();

    $api_data = array(
      'api_format' => 'json',
      'api_key' => self::$jwplayer_api_key,
      'api_nonce' => self::generate_api_nonce(),
      'api_timestamp' => time()
    );
    $api_data['api_signature'] = sha1( http_build_query( $api_data ) . self::$jwplayer_secret_key );
    $query = http_build_query( $api_data );
    $ch = curl_init( "https://api.jwplatform.com/v1/players/list/?$query" );
    curl_setopt( $ch, CURLOPT_RETURNTRANSFER, TRUE );
    $result = json_decode( curl_exec($ch), TRUE );
    curl_close( $ch );

    foreach( $result['players'] as $player ) :
      $players[$player['key']] = $player['name'];
    endforeach;

    return $players;
  }

}
